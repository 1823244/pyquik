#!/usr/bin/python
from trading import Market, Order, Indicator, Serie, MARKET_PRICE
from trading.broker import Broker, TRADE_LONG, TRADE_EXIT, TRADE_KEEP

import logging, sys

log = logging.getLogger("strategy")

class Strategy:

    def __init__(self,name,tickers):
        self.start_gap = 100 
        self.name = name
        self.tickers = tickers

        for ticker in tickers:
            ticker.indicator("MA1", "MA", optInTimePeriod=self.start_gap)
            ticker("signal").set(0)

    def trade( self, tick ):
        size = tick("price").size 
        if size < self.start_gap: 
            log.debug("Collecting data: %d/%d" ,size, self.start_gap )
            return TRADE_KEEP

        signal = tick("signal")

        if tick.price < tick.MA1:
            signal.set( 1 )
        else:
            signal.set( 0 )

        ssum = sum(signal.data()[-5:]) 
#        log.info("PRICE %s SIGNAL -> %s <-", tick.price, ssum)

        if ssum == 5.0: return TRADE_LONG
        if ssum == 0.0: return TRADE_EXIT

        return TRADE_KEEP


def main():

#    logging.basicConfig(level=logging.DEBUG)

    if len(sys.argv) == 2:
        from trading.backtest import BacktestMarket
        market = BacktestMarket()
        market.add_strategy( Strategy( "Bankruptsy", [market["SBER"]] ) )
        market.load( sys.argv[1] )
    else:
        from quik.market import QuikMarket
        market = QuikMarket( "c:\\quik-bcs","QuikDDE" )
        market.add_strategy( Strategy( "Bankruptsy", [market["SBER03"]] ) )
        market.run()

def profile():
    import hotshot, hotshot.stats
    prof = hotshot.Profile("trade.prof")
    prof.runcall(main)
    prof.close()
    stats = hotshot.stats.load("trade.prof")
    stats.strip_dirs()
    stats.sort_stats('time', 'calls')
    stats.print_stats(50)

if __name__ == "__main__":
    main()
