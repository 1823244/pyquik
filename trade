#!/usr/bin/python
from trading import Market, Order, Indicator, Serie, MARKET_PRICE
from trading.strategy import Strategy 
from trading.backtest import BacktestMarket
from trading.evolver import Evolver
from util import save_as_js
import datetime
import logging,  sys

log = logging.getLogger("strategy")
logging.basicConfig(level=logging.DEBUG)
log.info("STARTED")

def main():

    if len(sys.argv) > 1:
        market = BacktestMarket()
        market["SBER"].candle( datetime.timedelta( minutes=1 ) ).strategy( Strategy, 2, 71 )
        market.load( sys.argv[1] )
        print("Backtesting done.\nTicks: %d\nBalance: %.2f\nTrades: %d\nProfitable: %d (%.2f%%)" %
                  (market.ticks, market.balance, market.trades, market.profit_trades, 100.0 * (float(market.profit_trades) / market.trades) if market.trades > 0 else 0  ))

        if len(sys.argv) > 2:
            save_as_js( market["SBER"], sys.argv[2] )
    else:
        try:
            from quik.market import QuikMarket
        except ImportError:
            print("Quik connector not available")
            sys.exit(1)

        market = QuikMarket( "c:\\quik-bcs","QuikDDE" )
        market["SBER"].candle( datetime.timedelta( minutes=1 ) ).strategy( Strategy )
        market.run()

def evolve():
    ev = Evolver( sys.argv[1] )
    ev.run()
    print(ev.best)
 
def profile():
    import hotshot, hotshot.stats
    prof = hotshot.Profile("trade.prof")
    prof.runcall(main)
    prof.close()
    stats = hotshot.stats.load("trade.prof")
    stats.strip_dirs()
    stats.sort_stats('time', 'calls')
    stats.print_stats(50)



if __name__ == "__main__":
    main()
