# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_trading', [dirname(__file__)])
        except ImportError:
            import _trading
            return _trading
        if fp is not None:
            try:
                _mod = imp.load_module('_trading', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _trading = swig_import_helper()
    del swig_import_helper
else:
    import _trading
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _trading.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _trading.SwigPyIterator_value(self)
    def incr(self, n = 1): return _trading.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _trading.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _trading.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _trading.SwigPyIterator_equal(self, *args)
    def copy(self): return _trading.SwigPyIterator_copy(self)
    def next(self): return _trading.SwigPyIterator_next(self)
    def __next__(self): return _trading.SwigPyIterator___next__(self)
    def previous(self): return _trading.SwigPyIterator_previous(self)
    def advance(self, *args): return _trading.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _trading.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _trading.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _trading.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _trading.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _trading.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _trading.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _trading.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Table(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Table, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Table, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _trading.new_Table()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _trading.delete_Table
    __del__ = lambda self : None;
    def init(self, *args): return _trading.Table_init(self, *args)
    def reset(self): return _trading.Table_reset(self)
    def cols(self): return _trading.Table_cols(self)
    def rows(self): return _trading.Table_rows(self)
    def getString(self, *args): return _trading.Table_getString(self, *args)
    def getDouble(self, *args): return _trading.Table_getDouble(self, *args)
    def setString(self, *args): return _trading.Table_setString(self, *args)
    def setDouble(self, *args): return _trading.Table_setDouble(self, *args)
Table_swigregister = _trading.Table_swigregister
Table_swigregister(Table)

class MarketListener(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarketListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarketListener, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == MarketListener:
            _self = None
        else:
            _self = self
        this = _trading.new_MarketListener(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _trading.delete_MarketListener
    __del__ = lambda self : None;
    def onTableData(self, *args): return _trading.MarketListener_onTableData(self, *args)
    def onConnected(self): return _trading.MarketListener_onConnected(self)
    def onDisconnected(self): return _trading.MarketListener_onDisconnected(self)
    def onTransactionResult(self, *args): return _trading.MarketListener_onTransactionResult(self, *args)
    def __disown__(self):
        self.this.disown()
        _trading.disown_MarketListener(self)
        return weakref_proxy(self)
MarketListener_swigregister = _trading.MarketListener_swigregister
MarketListener_swigregister(MarketListener)

class Market(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Market, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Market, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _trading.new_Market()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _trading.delete_Market
    __del__ = lambda self : None;
    def addListener(self, *args): return _trading.Market_addListener(self, *args)
    def removeListener(self, *args): return _trading.Market_removeListener(self, *args)
    def run(self): return _trading.Market_run(self)
    def stop(self): return _trading.Market_stop(self)
    def connect(self, *args): return _trading.Market_connect(self, *args)
    def disconnect(self): return _trading.Market_disconnect(self)
    def sendAsync(self, *args): return _trading.Market_sendAsync(self, *args)
    def setDebug(self, *args): return _trading.Market_setDebug(self, *args)
    def errorMessage(self): return _trading.Market_errorMessage(self)
    def errorCode(self): return _trading.Market_errorCode(self)
Market_swigregister = _trading.Market_swigregister
Market_swigregister(Market)



